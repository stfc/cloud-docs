heat_template_version: 2018-08-31 #Rocky & Train releases

description: "Test template: LAMP stack with load balancing"
parameters:
  #parameters for the VM
  key_name:
    type: string
    default: <keypair>
    description: Key Pair to use in order to SSH into the instance.
  image_id:
    type: string
    default: <image-id>
    description: <image>
  flavor_id:
    type: string
    default: <flavor-id>
    description: <flavor>
  #security groups
  private_network:
    type: string
    default: <private-network-id>
  private_subnet:
    type: string
    default: <private-subnet-id>
  private_security_group:
    type: string
    default: <private-security-group-id>
  HTTP_security_group:
    type: string
    default: <http-security-group-id>
  default_security_group:
    type: string
    default: <default-security-group-id>


resources:
  #server: VM which will have apache2, php and other software installed
  #private_network_port: port for server
  #floating_ip_association: floating IP to attach to test_VM
  #health_monitor: octavia health monitor to attach to test_VM
  #pool: loadbalancing pool
  #pool_member: member of the loadbalancing pool - in this case just one VM
  #listener: loadbalancing listener
  #lb: loadbalancer

  server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image_id}
      flavor: {get_param: flavor_id}
      key_name: {get_param: key_name}
      networks:
        - network: {get_param: private_network}
      security_groups:
        - {get_param: default_security_group}
        - {get_param: private_security_group}
        - {get_param: HTTP_security_group}
      user_data_format: SOFTWARE_CONFIG
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            apt-get update
            apt-get install -y apache2 php libapache2-mod-php php-mysql php-gd mysql-server
            apt-get install -y expect

            SECURE_MYSQL=$(expect -c "
            set timeout 5
            spawn mysql_secure_installation

            expect \"Press y|Y for Yes, any other key for No:\"
            send \"n\r\"

            expect \"Please set the password for root here.\"
            send \"temporarypw\r\"

            expect \"Re-enter password:\"
            send \"temporarypw\r\"

            expect \"Remove anonymous users? (Press y|Y for Yes, any other key for No):\"
            send \"y\r\"

            expect \"Disallow root login remotely? (Press y|Y for Yes, any other key for No):\"
            send \"y\r\"

            expect \"Remove test database and access to it? (Press y|Y for Yes, any other key for No):\"
            send \"y\r\"

            expect \"Reload privilege tables now? (Press y|Y for Yes, any other key for No)\"
            send \"y\r\"
            expect eof
            ")
            echo "$SECURE_MYSQL"
            mysql << EOF
            SELECT user,authentication_string,plugin,host FROM mysql.user;
            ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY "$db_rootpassword";
            FLUSH PRIVILEGES;
            SELECT user,authentication_string,plugin,host FROM mysql.user;
            EOF
          params:
            $db_rootpassword: {get_attr: [database_root_password,value]}

  health_monitor:
    type: OS::Octavia::HealthMonitor
    properties:
      delay: 3 #three second delay
      type: "HTTP"
      timeout: 3 # seconds
      max_retries: 3
      pool: {get_resource: pool}
      url_path: /healthcheck #servers need to be configured to send HTTP message to path /healthcheck

  database_root_password:
    type: OS::Heat::RandomString
    properties:
      length: 16
      sequence: lettersdigits

  pool:
    type: OS::Octavia::Pool
    properties:
      lb_algorithm: LEAST_CONNECTIONS" #the preferred algorithm
      protocol: "TCP"
      listener: {get_resource: listener}

  member:
    type: OS::Octavia::PoolMember
    properties:
      address: {get_attr: [server, first_address]}
      pool: {get_resource: pool}
      protocol_port: 80
      subnet: {get_param: private_subnet}

  listener:
    type: OS::Octavia::Listener
    properties:
      protocol: "TCP"
      protocol_port: 80 # listens on port 80
      loadbalancer: {get_resource: lb}

  lb:
    #define the loadbalancer and the private subnet to use
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: "<private-subnet-id>" # {get_parameter: private_subnet}

  floating_ip_association:
    # Associate a floating IP to the Loadbalancer so that it can be accessed
    # using an external IP
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: <floating-IP-id>
      port_id: {get_attr: [lb,vip_port_id]}

outputs:
  pool_ip_address:
    value: {get_attr: [lb, vip_address]}
    description: IP address of the load balancing pool

  loadbalancer:
    value: {get_attr: [lb, show]}
    description: Details about the loadbalancer

  server_ip:
    value: {get_attr: [server, first_address]}
    description: IP of the load-balanced server

  lb_member:
    description: LB member details
    value: {get_attr: [member,show]}

  database_password:
    description: Root password for mySQL database
    value: {get_attr: [database_root_password,value]}
