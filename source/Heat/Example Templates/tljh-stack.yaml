heat_template_version: 2018-08-31

description: This template is an example template of how to set up a stack which installs The Littlest JupyterHub, python packages, and MySQL database

parameters:

  key_name:
    type: string
    default: <keypair>
    description: Key Pair to use in order to SSH into the instance.
  image_id:
    type: string
    default: <image-id>
    description: <image-name>
  flavor_id:
    type: string
    default: <flavor-id>
    description: <flavor-id>
  #security groups
  default_group:
    type: string
    default: <default-security-group-id>
  #access interface over HTTP on port 80
  HTTP_group:
    type: string
    default: <HTTP-SEC-GROUP-ID>
  #access interface over HTTPS on port 443 - HTTP security group is also required
  #HTTPS_group:
  #  type: string
  #  default: <HTTPS-SEC-GROUP-ID>

resources:

  database_root_password:
    #This generates a randomstring which will be used as the mySQL root password
    type: OS::Heat::RandomString
    properties:
      length: 16

  VM:
    type: OS::Nova::Server
    properties:
      image: {get_param: image_id}
      flavor: {get_param: flavor_id}
      key_name: {get_param: key_name}
      networks:
        - network: Internal
      security_groups:
        - {get_param: default_group}
        - {get_param: HTTP_group}
      #  - {get_param: HTTPS_group}
      user_data_format: SOFTWARE_CONFIG
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            #this script is for Ubuntu Bionic VMs
            apt-get update
            apt-mark hold libpam-krb5 libpam-modules libpam-modules-bin libpam-runtime libpam-systemd libpam0g
            apt-get -y upgrade
            apt-mark unhold libpam-krb5 libpam-modules libpam-modules-bin libpam-runtime libpam-systemd libpam0g
            echo "Stage 1: Python"
            echo "Installing pip3..."
            apt-get install -y python3 python3-dev git curl
            apt-get install -y python3-pip
            echo "Verify pip installation..."
            pip3 --version

            echo "Install JupyterLab"
            pip3 install jupyterlab #prerequisite for npm package @jupyter-widgets/jupyterlab-manager

            echo "Stage 2: Node.js"

            echo "install Node.js"
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            apt-get install -y nodejs

            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.lis
            apt-get update && sudo apt-get install -y yarn

            echo "Install The Littlest JupyterHub"
            #this is suitable for providing jupyter notebooks for 1-100 users on a single server
            #curl -L https://tljh.jupyter.org/bootstrap.py | sudo -E python3 - --admin admin-test:testpassword #adds admin user and sets a password 'testpassword'
            #Install python packages from a text file in a github repository
            #This uses an example text file that installs the python packages: datascience, matplotlib, pandas, scipy, gradememaybe
            curl -L https://tljh.jupyter.org/bootstrap.py | sudo -E python3 - --admin admin --user-requirements-text-url https://raw.githubusercontent.com/data-8/materials-sp18/master/requirements.txt

            conda update -n base -c defaults conda

            echo "Python packages should be installed through a JupyterHub terminal."
            SECURE_MYSQL=$(expect -c "
            set timeout 5
            spawn mysql_secure_installation

            expect \"Press y|Y for Yes, any other key for No:\"
            send \"n\r\"

            expect \"Please set the password for root here.\"
            send \"temporarypw\r\"

            expect \"Re-enter password:\"
            send \"temporarypw\r\"

            expect \"Remove anonymous users? (Press y|Y for Yes, any other key for No):\"
            send \"y\r\"

            expect \"Disallow root login remotely? (Press y|Y for Yes, any other key for No):\"
            send \"y\r\"

            expect \"Remove test database and access to it? (Press y|Y for Yes, any other key for No):\"
            send \"y\r\"

            expect \"Reload privilege tables now? (Press y|Y for Yes, any other key for No)\"
            send \"y\r\"
            expect eof
            ")
            echo "$SECURE_MYSQL"
            mysql << EOF
            SELECT user,authentication_string,plugin,host FROM mysql.user;
            ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY "$db_rootpassword";
            FLUSH PRIVILEGES;
            SELECT user,authentication_string,plugin,host FROM mysql.user;
            EOF
          params:
            $db_rootpassword: {get_attr: [database_root_password,value]}

outputs:
  db_root:
    value: {get_attr: [database_root_password, value]}
    description: MySQL database root password
